var num1 = 10;

function outer() {
    
    var num2 = 20;
    
    function inner() {
        
        var num3 = 30;
        return num1 + num2 + num3;
    };
    var result = inner();
    console.log(result);
};




함수
- 일련의 처리를 하나로 모아 언제든 호출할 수 있도록 만들어 놓은것
- 기능 


1. 함수 선언문으로 함수 정의하기

function 함수명 (매개변수, ..... ) {
	// 실행 코드 ...

	return 반환값;
}

2x + 1 = y

function calc(x) { 
	var y = x * 2 + 1;
	
	return y; // 반환값 
}

calc(3); x  = 3;

x - 매개변수

2. 함수 호출			
3. 함수의 실행흐름

function add(num1, num2) {
    var result = num1 + num2;

    return result;
}

add : 변수 - 함수 객체의 주소값 

참고) console.dir(...) : 객체의 속성과 값 형태 출력

객체간의 상속 

상속
	
	[[Prototype]] : 프로토타입 체인 - 상속 관계 링크
						__proto__ 속성을 통해서 접근
	

4. 함수 선언문의 끌어올림
	
	함수 객체(실행 X) -> 번역(평가) -> 실행 가능 객체(EC - Execution Context) -> 실행
	
	window
	
	global EC {
		변수 레코드 - window 의 하위 속성으로 변수가 정의 
			window.num0 = 5;
		외부 변수 레코드 참조 : null
	
		this 바인딩 : window 객체의 주소 값 
	}
	
	outer EC {
		변수 레코드 객체 : {
			num1: 10
		}
		
		외부 변수 레코드 참조:  global EC 변수 레코드 주소 :  window
		
		this 바인딩 : 호출한 객체의 주소값 
	}
	
	inner EC {
		변수 레코드 객체 {
			num2: 20,
			result: 35
		}
		
		외부 변수 레코드 참조: outer EC 변수 레코드 주소
		
		this 바인딩 : 호출한 객체의 주소값
			
	}
	
	유효범위 체인(Scope)
	
	this 바인딩 - this 지역변수 값 결정
	
5. 값으로서의 함수
	함수(X), 함수 객체(O) - 값이 있음, 변수에 대입 가능
	
	일등 함수 : 변수와 함수를 동등하게 취급, 함수 == 값
		1) 매개변수로 함수 객체를 사용 
		2) 반환값으로 함수 객체를 사용(클로저...)
		
		-> 함수형 프로그래밍이 가능

6. 참조에 의한 호출과 값에 의한 호출

변수의 유효범위
1. 전역 유효 범위와 지역 유효범위
	-> 함수 지역 
	-> 유효범위 체인(Scope)

2. 변수의 충돌
3. 함수 안에서 변수 선언과 변수 끌어올림
4. 함수 안에서 변수 선언 생략
5. 블록 유효 범위 : let과 const
	
	var : 함수 지역이 유효범위 
	
	let, const -> { .... }
	
	let : 변수 - 값 변경이 가능 
	const: 상수 - 값 변경이 불가 
	
	
	-> 변수는 기본적으로 const로 정의, 변경이 필요한 경우만 let으로 사용

6. 함수 리터럴로 함수 정의하기
	const 변수명 = 함수 객체;

7. 객체의 메서드
8. 즉시 실행 함수
9. 가변길이 인수 목록(Arguments 객체)


parameter - 인자(매개변수)
argument - 인수(매개변수에 대입된 값

생성자