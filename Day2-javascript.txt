자바스크립트 
HTML - 뼈대 
CSS - 스타일 
JS - 기능 


크롬개발도구 콘솔 사용
	crtl+R
	shift+ enter 여러줄입력
	위 방향키 : 이전 기존코드 가져오기
	그냥엔터 : 실행
	기본수준... (메세지 수준 선택 옵션)


1. 실습방법 안내 
	<style>
	  ....
	</style>

- 브라우저 - 콘솔
	- 렌더링 엔진 + 자바스크립트 해석 엔진(V8)  (크롬기준)

          :  렌더링엔진 : Webkit/bink : 스타일해석
          :  자바스크립트 엔진 :V8

- SHIFT + 엔터 -> 줄 개행

자바스크립트 기초 문법
1. 자바스크립트 사용하는 방법
	1) script 태그 안에 정의하는 방식

	2) HTML 태그의 이벤트 처리기 속성 	
            on동작
            예) onclick="클릭시 동작하는 스크립트 코드"

	3) 외부 스크립트 파일로 사용하는 방법 
            <script src="스크립트파일경로"></script>

2. 자바스크립트 주석 처리
	- 자바스크립트 엔진이 해석 X
	1) 설명 
		// 한줄 설명..
		/*
		  여러줄설명 ...
		*/
		 /**
		  * 설명용 주석
		  *
		 */
	2) 실행 배제 
             - 해석하지 않으므로 
3. 변수
	1) 정의
		공간의 이름
		변하는 수 
		
	2) 변수선언
		var 변수명;
		
		변수명 = 값; (저장)  / 최초로 값을 저장 -> 초기화
		
		
		var 변수명 = 값;  // 선언과 동시에 초기화
		
		참고)
			; -> 문장의 끝
		
			console.log(값); -> 값의 출력 기능
		
		CTRL + R / F5 : 새로고침
		
	3) 선언자 종류
		var, 
		let, const 
	        참고) 2015년 ECMA Script6 유럽표준단체...기점으로 javascript 많이 바뀜, 추가 많이 됨 
                        var 안쓰고 let, const 나옴
                        현재버전 : ECMAScript6+ =  ES6+ = ESNext 
      
	4) 선언 방법	
		변수가 여러개 있는 경우 
		변수 선언자 변수명, 변수명, 변수명;
		

	5) 변수 선언 생략
	6) 변수 끌어올림과 변수 중복 선언
	- 변수 중복 선언시 기존 값이 변경 

	7) 변수의 명명규칙
	1) 알파벳(대소문자), 숫자, 특수문자(_, $)
		 - 한글도 사용 가능 - 권장 X 
	2) 숫자는 변수명 앞에 올수 없다.
	3) 예약어는 쓸 수 없다.
		(return, if, for .... throw ...)

	4) 변수명은 의미있는 단어 작성

	var a = 10; X
	var noOfStudent;    


	(1) - var num1
	(2) - var 1st
	(3) - var _abc
	(4) - var $dollar;

변수명을 짖는 관례 (함수명 적용)
var numberOfOrder : 카멜 표기법
	 - number    Of    Order 
	- 단어의 첫문자는 대문자, 다만 시작 단어는 소문자

    참고) 상수 : 변경이 불가한 수 표기 관례 : NO_OF_STUDENT
   

8) 변수에 저장할 수 있는 자료형
	자료형 : 값의 형태, 형식 

	참고) typeof : 자료형을 체크해 보는 연산자

	- 문자형(string) : "또는 '로 값을 감싸면 문자형
		var str = 'ABC'; 
		var str = "ABC";
		
	- 숫자형(number) 
		- 정수(소수점이 없는 수  - 양수(1,10), 음수(-1, -10), 0)
		- 실수(소수점이 있는 수 - 3.123, 0.0)
		
	- 논리형(boolean) 
		- 참, 거짓 
		- true (참)
		- false (거짓)
		
		- 제어문, 반복문에서 자주 활용
		
	- null : 값이 없는 상태(값)

	- undefined : 값이 정해지지 않은 상태 - 변수를 선언만 한 경우

4. 연산자	
	- 항 : 연산에 사용되는 값
			연산에 사용되는 값의 갯수 
			1 : 단항 연산
			2 : 이항 연산 
			3 : 삼항 연산
			
	- 연산자 : 연산에 사용되는 기호
	
	
	1) 산술 연산자 
		- 더하기(+), 빼기(-), 곱하기(*), 나누기( / ), 나머지(%)
		
		- 나머지(%) : 균등 배분(나머지가 나누는 수보다 작은 수가 반복해서 나온다)
		
		- 문자형 + 연산자 : 수치 연산 X,  문자를 결합
			var str1 = "abc";
			var str2 = str1 + "def";   
		- 문자 + 숫자 -> 문자 
			var num1 = '100';
			var num2 = num1 + 100; // 100100   <- 연산자 오버로드
		- 문자 + 불린 -> 문자  // 100 + true => 100true 
				
		
		- *, /, %의 연산의 우선 순위가 +, -보다 크다  
		- (....) : 연산자의 우선순위 강제 적용 
        
		[] : 대괄호
		{} : 중괄호
		() : 소괄호  : 연산시 적용 우선순위 가장 높다

	2) 대입연산자 
		- =
		- 오른쪽에 있는 값을 왼쪽 변수에 저장
		- var num = 10;
		- 연산의 우선순위가 가장 낮은 연산자
	
	3) 증가감소 연산자 
		- 단항 연산 
		- 1씩 증가, 1씩 감소
		
		var num = 10;
		num = num + 1; -> num++;   // ++num;
		
		- ++
		- --
		
		num++;   // num = num + 1;   num2 = num++; (대입부터 하고 ++ 나중에)
		++num;   // num = num + 1;   num2 = ++num; (++ 먼저하고 나중에 대입)
		
		num--; // num = num - 1;
		--num; // num = num - 1;
	
	4) 복합 대입 연산자 
		산술 연산 + 대입 
		(+, -, *, /, %) + =
		
		num = num + 2; // num += 2;
		num = num * 2; // num *= 2;
		
	5) 부호 연산자 
		(+, -)
		- : 부호 반전 (음수 -> 양수, 양수 -> 음수)
			(* - 1)
		
	6) 비교 연산자 = 논리연산자
		크다(>), 작다(<), 크거나 같다(>=), 작거나 같다(<=)
		같다(==)
		같지않다(!=, !==)
		
		- 연산의 결과가 논리값(boolean : 참(true), 거짓(false)) -> 판별식에서 주로 사용(조건식, 반복문)
		
		참고) 
			동일성 비교 : 동일한 주소(===)
			동등성 비교 : 동등한 가치 (==)  => type이 다른건 체크하지 않음
			ex) num1 = 10; num2 = '10'; (num1 == num2) => true / (num1 === num2) => fase 
