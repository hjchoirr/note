포트폴리오 과제

5/23 부터 포트폴리오 만드는 기간
5/23 - 24 필요한거 강의
5/23 - 6/4
5/28 - 6/4  조별 과제 2가지를 3일씩 하고 발표 




Board 테이블

-> BoardMapper.xml
-> BoardMapper 인터페이스
-> Board데이터 클래스



-> select, update, insert, delete

	select
		- 게시글 목록 : 조회(기시긍 제목, 내용 - Like 검색)
		- 게시글 1개(개시글 번호) selectOne
	
------------------------------------------------------------------
묵찌빠 게임 

1. 회원가입
2. 로그인
q. 종료


5/27 1교시 동영상 참조

D:\hjchoi\8.실무프로젝트(P-2)\project>git init
Initialized empty Git repository in D:/hjchoi/8.?ㅻТ?꾨줈?앺듃(P-2)/project/.git/
fatal: unknown write failure on standard output

D:\hjchoi\8.실무프로젝트(P-2)\project>git remote add origin https://github.com/hjchoirr/project502_p2.git

D:\hjchoi\8.실무프로젝트(P-2)\project>git add .
warning: in the working copy of '.gitignore', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'gradlew', LF will be replaced by CRLF the next time Git touches it

D:\hjchoi\8.실무프로젝트(P-2)\project>git commit -m "initial upload"
[master (root-commit) 6bd312e] initial upload
 11 files changed, 425 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .idea/.gitignore
 create mode 100644 .idea/gradle.xml
 create mode 100644 .idea/misc.xml
 create mode 100644 .idea/vcs.xml
 create mode 100644 build.gradle
 create mode 100644 gradle/wrapper/gradle-wrapper.jar
 create mode 100644 gradle/wrapper/gradle-wrapper.properties
 create mode 100644 gradlew
 create mode 100644 gradlew.bat
 create mode 100644 settings.gradle

D:\hjchoi\8.실무프로젝트(P-2)\project>git push origin master
Enumerating objects: 16, done.
Counting objects: 100% (16/16), done.
Delta compression using up to 12 threads
Compressing objects: 100% (13/13), done.
Writing objects: 100% (16/16), 59.93 KiB | 11.98 MiB/s, done.
Total 16 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To https://github.com/hjchoirr/project502_p2.git
 * [new branch]      master -> master

D:\hjchoi\8.실무프로젝트(P-2)\project>

깃허브에서

Branch name pattern - master

2개 체크
 - Require a pull request before merging
 - Do not allow bypassing the above settings



---------------------------------------------------------------------

lombok
ojdbc11  - runtimeOnly
orai18n
mybatis
slf4j-api
Logback Classic Module - implementation


sync


---------------------------------------------------------------------

build.gradle에 추가
---------------------------------------------------------------------
plugins {
    id 'java'
    id 'application'
}

mainClassName = 'org.choongang.Application'

tasks.jar {
    manifest.attributes['Main-Class'] = 'org.choongang.Application'
}

---------------------------------------------------------------------
Application.java 만들기 - main/java/org.choongang/Application.java
---------------------------------------------------------------------

package org.choongang;
public class Application {
    public static void main(String[] args) {
        System.out.println("프로그램 시작!");
    }
}

---------------------------------------------------------------------
코끼리 모양 그레이들에서 
gradle run
gradle build
---------------------------------------------------------------------


D:\hjchoi\8.실무프로젝트2\project>cd build

D:\hjchoi\8.실무프로젝트2\project\build>cd libs

D:\hjchoi\8.실무프로젝트2\project\build\libs>java -jar project-1.0-SNAPSHOT.jar
?봽濡쒓렇?옩 ?떆?옉!

D:\hjchoi\8.실무프로젝트2\project\build\libs>
---------------------------------------------------------------------


mvc 모델 - 역할 분담

M : model 
	- 비즈니스 로직 구현
	  Service : 기능/회원가입기능 등 -> JoinService
	- DTO (Data Transfer Object) :데이터 전달 목적의 객체 
	- Validator - 데이터 검증
	- DAO(Data Access Object) :데이터 접근객체(DB처리..)
	- VO(Value Object)
		
V - view : 처리 결과 데이터를 보이는 부분

C : Controller 요청(사용자) - 요청처리를 위한 모델, 뷰 연결 - 응답(뷰)
	- 모델과 뷰의 중재 역할
 
DDD (Domain Driven Design : 도메인 주도 설계)
Domain : 전문가 영역 - 게시판 도메인, 주문 도메인, 상품 도메인, 회원 도메인

표현계층
도메인계층
인프라계층 : 공통인프라(DB...)

MSA(Micro Service Architecture)



4. Controller 설계 

	1) 메뉴 라우팅
	2) 컨트롤러
	
	
	-> 템플릿 메서드 패턴
	
	run()
	공통 : common()
	메뉴항목 : show()
	입력 : prompt()


	3) 뷰(View) : template
		- Template 인터페이스
		- Template 클래스
	
file.encoding
	윈도우 인코딩 window949, CPC949, EUC-KR -> 한글을 2바이트로 표시하는 유니코드
	UTF-8 : 한글 1글자를 3바이트로 표시하는 유니코드
	
	환경변수
	
	java -jar -Dfile.encoding=UTF-8 파일명.jar
	
	String System.getEnv("환경변수명")
	
	
	코끼리 -> 명령 -> gradle build
	
	D:\hjchoi\8.실무프로젝트2\project\build\libs>java -jar -Dfile.encoding=UTF-8 project-1.0-SNAPSHOT.jar

5. Model 설계
	기능 - Service
		- DTO, DAO, Validator ..다른 객체의 협력을 통해서 하나의 기능을 완성
		- 회원이 입력한 데이터가 매개변수 
		
		DTO : Data Transfer Object
		
		
mybatis-config.xml


SQL> create user project2_1 identified by oracle;

User created.

SQL> alter user project2_1 quota unlimited on users;

User altered.

SQL> grant connect, resource to project2_1;

Grant succeeded.

SQL> conn project2_1/oracle
Connected.
SQL> create table member(
  2     user_no number(10) primary key,
  3     user_id varchar2(30) unique not null,
  4     user_pw varchar2(65) not null,
  5     user_nm varchar2(40) not null,
  6     reg_dt date default sysdate,
  7     mod_dt date 
  8  );

Table created.

SQL> create sequence seq_member;



소켓 강의 - 5/28 3시 10분부터  동영상 참조
	- 소스 github : ....
	https://github.com/yonggyo1125/project502_13_2
	

p-2 : 묵찌빠
p-3 : 학생관리
	2, 3 구조화된 틀 따르기
	구조를 파악하기
	만드는게 목표가 아님 
	

상품성 있게 만들기

p-4 : 팀별 포트폴리오 : 스프링부트 + JPA, ( + 스프링클라우드 )
	: 좀더 자율적
	
p-5 : 기업 포트폴리오 : 기업에서 기획서를 제공


5/29 동영상 꼭 다시 보기(구조설명) 5/27 : 구조 만드는 동영상 - 1교시부터

P-2, P-3 구조 설명

	mvc 모델 - 역할 분담 모델 / UI 

			
	V - view : 처리 결과 데이터를 보이는 부분

	C : Controller 요청(사용자) - 요청처리를 위한 모델, 뷰 연결 - 응답(뷰)
		- 모델과 뷰의 중재 역할
	 
	  : 사용자의 요청은 controller로 들어옴, 요청에 대한 처리를 위해 맞는 기능(Model)을 찾는다
	     처리 결과를 view로 보냄  

	M : model 
		- 기능을 말함
		- 비즈니스 로직 구현
		  Service : 기능/회원가입기능 등 -> JoinService
		- DTO (Data Transfer Object) :데이터 전달 목적의 객체 
		- Validator - 데이터 검증
		- DAO(Data Access Object) :데이터 접근객체(DB처리..)
		- VO(Value Object)

	DDD (Domain Driven Design : 도메인 주도 설계)
	
	Domain : 전문가 영역 
		   : 기능별 영역 - 게시판 도메인, 주문 도메인, 상품 도메인, 회원 도메인

		예)
		  표현계층 : 출력, 응답(View)
		  도메인계층 
		  인프라계층 : 공통인프라(DB...)

	MSA(Micro Service Architecture)



	4. Controller 설계 

		1) 메뉴 라우팅
		2) 컨트롤러
		
		
		-> 템플릿 메서드 패턴
		
		run()
		공통 : common()
		메뉴항목 : show()
		입력 : prompt()


		3) 뷰(View) : template
			- Template 인터페이스
			- Template 클래스


	게임 - 도메인으로 분리하기

		메인도메인 
		게임도메인
		템플릿도메인
		
	학생관리 프로그램의 경우
		학생도메인
		교수도메인
		행정직원도메인
	
	
	템플릿 - 뷰


	구조 소스 적용하기
	https://github.com/yonggyo1125/project502_13_2/
	project502_13_2/src/


	M(Model) : 기능 
	
		서비스 - 예) 회원가입 기능
		  - DTO(Data Transfer Object) : 데이터 전달 객체 
			: RequestJoin, RequestLogin
		  - Validator : 데이터 검증
		  - DAO(Data Access Object) : 데이터 접근 객체
		  + 기타..
		  
	주입 - 통제를 위해.. - 매개변수로 받는 거 말함
	
	의존 - 생성자로 객체 생성 -> 의존성 : 닫힌 구조?
	
	
	로케이터를 통해서 사용하면 바꿀때 100군데 다 안꿔도 된다. 객체 통제
	로케이터 한군데서만 바꾸면 로케이터를 사용하는 모든 객체에 적용됨 
	  -> 확장에 열린 구조, 통제 가능, 주입하기, (개방폐쇄 원칙)
	  
	-> 통제를 하기 위한 전략 패턴
	
	
	스프링프레임워크 - 주기능 : 객체관리 기능
	
	기능은 싱글톤 패턴으로 
	
	서비스 로케이터 인터페이스 -> 추상 서비스 로케이터 -> 각 서비스가 상속
	
	
	라우터(Router) : 웹은 톰캣이 대신함 - 해당주소에  해당 서비스 찾아줌
	
	 - 공통부분(global)에 있고 -> main 에 메인 라우터
	
	 - 해당 컨트롤러 찾는 기능
	 
	템플릿츠(Templates) : Controller의 show()에서 사용, 필요한 뷰(템플릿)를 찾아 가도록 함
	
	 
	AbstractController 에 Scanner 있음
		
	@Override
    public final void run() {
        common();
        show();
        prompt();
    }
	
	추상클래스의 목적 : 공통기능, 공통자원, (설계)
	인터페이스의 목적 : 설계
	
	
	-----------------------요기까지 쌤 설명
	요기부터 내가 파악
	
	Router interface - global에 위치함
		: 해당 controller 찾아 연결함 
		: change(), start()
	MainRouter
		: 현재 메인 메뉴밖에 없으므로 라우터가 MainRouter 밖에 없다
		: change() : MemberControllerLocator 클래스의 find() 호출로 컨트롤러 받아오고 controller.run() 호출
		: start() : wile 안에서 change() 호출
	
	
	Controller interface - Service 와 view 연결
		: show(), run()
		
	AbstractController - 컨트롤러 추상클래스 (추상클래스는 공통자원, 공통기능)
		
		: common()
		: prompt()  메뉴중 선택하라 메시지 출력후 입력 받아  change() 호출
		: promptWithValidation()
		: change() - Router의 change() 호출
		
		: final run() - common() show() prompt() : 절차고정
	
	MainController - AbstractController 상속받고 show() 구현 
		: show() : 메인메뉴 templates render() 호출
	
	ControllerLocator interface : 
	
	
	