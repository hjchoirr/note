개발환경 구축

	인텔리제이 기준
		- plugin : Smart tomcat
		- Tomcat 10 버전
		- Tomcat 10 버전
			WAS(Web Application Server)
			
		(참고) 
			tomcat9 -> javaee 8, 패키지명 javax
			tomcat10 -> jakarta ee 10, 패키지명 jakarta

		inteliJ - files -> settings 
		
			-> marketplace -> tomcat 검색 -> Smart Tomcat install
			-> build tool -> gradle -> inteliJ 
			-> encoding -> UTF-8
			
			
		jakarta ee 10 doc api 검색
		
		jakarta.servlet-api
		jakarta.servlet.jsp-api
		
		=> 개발시에만 필요, 실제 구현체에는 각 웹서버가 가지고 있으므로 배포시에는 배제됨
		
		의존성 추가 - mvn repository : 
		Jakarta Servlet » 6.0.0
			compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

		Jakarta Server Pages API » 3.1.1
			compileOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.1'


	src/main/webapp
			- HTML, JS, CSS, JSP 
			
	src/main/webapp/WEB-INF/ 폴더
		- web.xml : 애플케이션 배치 설명자 파일
		- 서블릿, 필더 등등 배치에 대한 설정
		- lib : 자바 라이브러리 jar
		- classes : 컴파일된 class

		web.xml 파일 작성 ( 참고 - D:\hjchoi\apache-tomcat-10.1.24\webapps\examples\WEB-INF : 톰캣 다운 받은거의 examples에 있음 )
		web-app xmlns  붙여넣고 마지막부분 지우기 --->  metadata-complete="true" 이것만 지우기
		
		run : current file -> 드롭다운 클릭 -> 왼쪽 상단 + 버튼 -> Smart Tomcat -> 
			Name : Tomcat 10
			config  -> Tomcat Server : 톰캣 다운받은 폴더
			
		webapp/index.jsp 파일 추가( Hello!)

웹 기초
	1. 요청과 응답 이해하기
		요청(request)
		응답(response) 

		요청 전문 
			헤더(header)
			  - 요청에 대한 정보 
			  - 요청 주소 (URL, URI)
			  	URL : Uniform Resource Locator
			  	URI : Uniform Resource Identifier
			  	
			  - 요청방식 (method : POST, GET)
			  	GET : 검색등 가져오기 위한 요청
			  	POST : 서버에 변경을 가하는 요청
			  	
			  - 브라우저의 언어설정(Accept-Language) 등.. 
			  - 브라우저 종류(User-Agent)
			  - 쿠키 : 브라우저에 저장되는 개인 서비스 데이터
			  
			  헤더확인방법 : 크롬 www.naver.com 우클릭 -> 검사 -> 네트워크 -> 맨위로 스크롤 ->  www.naver.com 선택 -> 헤더 -> 요청헤더
			
			바디(body)
				- 요청쪽에서 서버로 전송하는 데이터(POST 메서드)
				 
			
		응답 전문
			헤더(header) 
			  - 응답 데이터에 대한 정보
			  - body 데이터의 형식(content-type)
				예) content-type: text/html -> 브라우저는 응답한 분자열 데이터 -> HTML 형식으로 인식 -> Document객체 변환
			  - 응답 서버에 대한 정보
			  - 서버쪽에서 브라우저 행위 통제
			    : Location: 주소 -> 브라우저의 주소를 변경페이지로 이동
				: Refresh: 초 -> 초 주기로 새로고침
				: Cache-Control: no-cache : 캐시 통제
				: Set-Cookie: 키=값;
				
			바디(body)
				
	2. HTTP ( HyperText Transfer Protocol)
	3. 헤더(header)
	4. HTTP 상태 코드
	5. HTTP 요청 메서드



서블릿(Servlet)
1. 서블릿(Servlet)의 개요
2. 서블릿(Servlet) 클래스 작성하기
3. web.xml 파일에 서블릿(Servlet) 등록하기
4. XML 문법의 기초
5. 웹 브라우저로부터 데이터 입력 받기
6. init메서드와  destroy 메서드


필터와 래퍼

- 요청과 응답 사이에서 걸러주는 기능 

1. 필터 클래스, 필터 객체, 필터
	Filter 인터페이스를 구현 -> 필터 클래스 

2. 필터가 위치하는 곳

3. 필터 클래스의 작성, 설치, 등록
	web.xml 
		<filter>
			<filter-name>..</filter-name>
			<filter-class>...</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>...</filter-name>
			<url-pattern>...</url-pattern>
		</filter-mapping>

	- 필터 체인(filter chain)
	
4. 필터 클래스의 init 메서드와 destroy 메서드
5. 래퍼 클래스 작성 및 적용하기