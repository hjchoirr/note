4/12

실습환경 구축하기
1. 자바 설치하기
	CRTL + SHIFT + B : 즐겨찾기 탭 

	버전 :JDK22 /21 /17

	jdk 다운로드
	https://www.oracle.com/kr/java/technologies/downloads/

	jdk 21 / 17 : LTS버전 

	jdk17 Windows용	x64 MSI Installer 다운
	Documentation Download jdk-17.0.10_doc-all.zip -> doc폴더 옮기기
	
	
2. 환경변수 설정하기
	JAVA_HOME : 다른 SW가 사용하기 때문에 설정함.
		Win버튼 -> 찾기 -> 환경변수 -> 시스템변수
	JAVA_HOME : C:\Program Files\Java\jdk-17
	
	C:\Program Files\Java\jdk-17
	C:\Program Files\Java\jdk-17\bin 
		- 실행 파일이 있는 폴더 
		
		java.exe  : class 파일 실행 
		javac.exe : java -> class 컴파일 
		javadoc.exe : java api 문서를 생성

	- 환경 변수 등록 목적 : 어떤 경로라도 항상 접근 가능 설정 
	> java --version

	jdk-17\bin
	jdk-17\lib
	jdk-17\lib\src.zip
	
	
3. 인텔리제이  (커뮤니티 버전) 체코업체, 코틀린 개발한 업체
	다운, 설치
	https://www.jetbrains.com/ko-kr/idea/
	IntelliJ IDEA Community Edition (ideaIC-2024.1.exe) : 확장자에 연결 안함
	
	new project > day01 > location: D:\hjchoi\3.응용SW기초기술활용\source
	Add sample code : 체크안함
	
	
	확장자 java -> 컴파일(javac 파일명.java) -> 확장자 class -> java 클래스 파일

	Write Once, Run EveryWhere
		
	.java -> .class (JVM 인식하는 중간언어) -> JVM(Java Virtual Machin - 자바 가상머신) - 플랫폼에 맞는 기계어로 컴파일 


	패키지 : 폴더
		패키지 설정되어 있지 않으면 src 폴더 => default 패키지
		exam01 패키지 만들고 안에 클래스 추가하면 -> 
			--------------------------
			package exam01;
				public class Hello {
			}
			--------------------------
			
		하위패키지(하위폴더) 는 . 으로 표시

			--------------------------
			package exam01.sub;
				public class Hello {
			}
			--------------------------
		day01/out 폴더 : 인텔리제이가 컴파일하면 클래스 파일 생성해서 넣는 폴더 : 이클립스는 다름
		

변수와 자료형
1. 컴퓨터는 데이터를 어떻게 표현할까?
	- 반도체 
	전기 신호가 있으면 1
	전기 신호가 없으면 0
	-> 2진수
	
2. 10진수와 2진수
	1100100 - 2진수 
	10진수 : 100

	bit : 1,0으로 표현할 수 있는 최소 단위
	8bit -> 1byte

3. 부호있는 수를 표현하는 방법
	1bit : 부호 비트 (0 - 양수, 1 - 음수)
	1byte = -2^7 ~ 2^7 - 1 (-128 ~ 127)

변수란 무엇일까?
1. 변수란? 
	- 변하는 수
	- 공간의 이름 
	- 공간 : 메모리 
	- 자료형 : 메모리 크기 
	
	메모리, 이름, 자료형
	자료형 : 공간의 크기 
	
2. 변수 선언하고 값 대입하기
	자료형 변수명;
	int 변수; (4바이트)
	
	자료형 변수명 = 값;
	
3. 변수 초기화하기
	변수에 최초로 값을 대입(저장) 하는 것 
	자료형 변수명 = 값;  - 선언과 동시에 초기화
	
4. 변수 이름 정하기
	1) 알파벳, 숫자, 특수문자($, _)
	2) 숫자는 변수명 앞에 사용 불가 
	3) 예약어는 사용 불가(return, throw, if ...)
	4) 유의미한 단어로 변수명 구성 
	
		int 1st; - X
		int _$dollor - O
		int noOfStudent - O
		int $a  - O
		int throw - X
		
		noOfStudent     : 카멜 표기법 - 변수
		class OrderInfo : 클래스명은 첫글자 대문자로 -> 파스칼표기법
		
참고)

	주석 - 설명, 컴파일러가 해석 X, 제거
		// - 한줄 주석 
		/*
			여러줄 주석 
			....
		*/
		/**  설명 주석 
		*
		*
		*/
	2) 프로그램 실행 배제 - 해석 X -> 실행 X
	
변수가 저장되는 공간의 특성, 자료형
1. 변수와 메모리

	참고)
	자료형 (공간의 크기)
	- 기본 자료형
		- 숫자를 담는 자료형
		
		정수형
		   : byte  - 1byte 
		   : short - 2byte
		   : int   - 4byte
		   : long  - 8byte / l(L) 
		실수형
		   : float -  4byte / f(F)
		   : double - 8byte
		논리형
		   : boolean - 1byte (true, false)
		   : 판별식, 반복문에서 주로 사용
		문자형
		   : char - 2byte ~ 3byte 문자 char ch = 'A';
		     
			아스키코드(1byte) : 문자표
			유니코드(2 ~ 3byte) : 문자표
				---------------------------
				char ch2 = '가';
				System.out.println(ch2);
				System.out.println(ch2 + 1);			
				----------------------------
				( * char는 양의 정수만 저장 가능함  char ch3 = -65;  <- 안됨 )  
			
			
	- 참조 자료형
		- 다른 데이터의 주소를 참조 하는 자료형 
		- 자원의 주소만 가지고 있는 변수 사용시 

2. 기본 자료형의 종류

1) 정수 자료형
	byte : 1바이트(8비트) -2^7 ~ 2^7 -1 (-126~125)
	short : 2바이트(16비트)  -2^15~2^15 - 1 
	int    : 4바이트(32비트) -2^31~2^31 - 1
	long  : 8바이트(64비트) -2^63~2^63 - 1
	
2) 문자 자료형
	char : 2바이트 
	
		참고) 숫자 변수에 대입 숫자 그대로 대입 
				문자를 변수에 대입할 경우 '문자'
				
				숫자 - 문자 : 아스키코드(1byte)
									/ 양의 정수 
									unsigned : 양의 정수 
									0~255
									
									- 영문, 특수문자 
				숫자 - 한글 :  유니코드(2byte, 3byte)
				
3) 실수 자료형
	- 소수점을 가지고 있는 숫자 
	float : 4byte
	  - 숫자 끝에 F(f)를 추가 
	double : 8byte
	
4) 논리자료형
	- 참, 거짓 (true, false)
	boolean

상수와 리터럴
1. 상수 선언하기
	- 상수 : 변하지 않는 수 (constant)
	- final 예약어 변수명 앞에 추가 
	  (final 이름 명명 관례)
		: 대문자로 작성 
		: 단어와 단어 사이 _로 구분  
			예) final int MAX_NUMBER = 10;
		
참고) final : 변경할 수 없는 
		
2. 리터럴(literal)
	
	- 리터럴 상수 
	- 재료가 되는 수 (문자, 숫자, 논리값)
	- 같은 재료 -> 하나만 생성(상수)		
	
	
	- 모든 정수를 처음에는 int 인식 
	long num = 10000000000
	
		:  처음부터 long으로 할당하려면 숫자 끝에 l, L을 붙여주면 된다.
		long num1 = 10000000000L;    // long type은 이렇게 써야..
		long num1 = 10_000_000_000L;  // 너무 기니까 이렇게 써도 됨
			
	1) int 10000000000 -> 오류 
		
		
	
	- 모든 실수를 처음에는 double 인식 
			
	
형변환
- 자료형간 변환 

1. 묵시적 형변환
	- 자동 형변환 
	- 작은 자료형 -> 큰 자료형 
	- 정수(덜 정밀한 숫자) -> 실수(더 정밀한 숫자)
	- 연산 중 자동 형변환  : 연산은 같은 자료형만 가능  -> 연산을 위해서 자동 형변환 
	
        byte num1 = 100; 
        int num2 = num1;  // 자동 형변환 = 묵시적 형변환
        long num3 = num2; // 자동 형변환 = 묵시적 형변환
	
	byte -> short -> int -> long -> float -> double  // 자동 형변환
			char -> int
			
	연산중에도 자동형변환 : 작은자료형 -> 큰자료형 변경
	정수 -> 실수
	
	    int num1 = 10;
        double num2 = 2.5;
		System.out.println(num1 * num2);
		>> 25.0 
	
		
2. 명시적 형변환
	- 데이터의 유실이 발생할 가능성이 있는 경우 - 자동 형변환 X
	- 명시적으로 형변환 의사 표현 
        
		int num1 = 100;
        byte num2 = (byte)num1;	
		
        double num1 = 10.123;
        long num2 = (long)num1;
        System.out.println(num2);  // -> 10 데이터 유실
		
		
연산자
- 항과 연산자
	항: 연산에 사용되는 값
	연산자: 연산에 사용되는 기호
	단항연산, 이항연산, 삼항연산 
	
1. 대입 연산자 
	int num1 = 10 + 20 * 3; 
	연산의 우선순위 가장 낮다.

2. 부호 연산자			
	+
	- : 부호반전 ( 음수 -> 양수, 양수 -> 음수 )
	
3. 산술 연산자   
	+ - * / %
	연산자 우선순위 *, /, % 가 +, - 보다 높다
	=>  (..) 우선순위 강제 적용
	
4. 증가감소 연산자	
	++ -- : 단항연산자
	
	int num2 = num++  : 대입먼저, 증가나중
	int num2 = ++num  : 증가먼저, 대입나중 
	
5. 복합대입 연산자 : 대입연산자 + 다른 연산자
	num += 2;
	num *= 2;
	
	
	

5. 관계(비교) 연산자
6. 논리 연산자
- 단락회로 평가 
7. 복합 대입 연산자
8. 조건 연산자(삼항조건연산자)
9. 연산자 우선순위