
config 서버

	- P-4 의 config server 에 추가함
	- bootstrap.yml
	  spring.profiles.active : native, git
	  spring.cloud.config.server.git.uri: https://github.com/hjchoirr/P5.git
      spring.cloud.config.server.git.searchPaths: project_config/configs
      spring.cloud.config.server.git.default-label: master


gateway 서버

	spring boot initial

	https://start.spring.io/#!type=gradle-project&language=java&platformVersion=3.3.3&packaging=jar&jvmVersion=17&groupId=org.choongang&artifactId=gateway&name=gateway&description=Demo%20project%20for%20Spring%20Boot&packageName=org.choongang&dependencies=cloud-config-client,cloud-eureka,cloud-gateway-reactive,actuator


	Spring Cloud Starter Bootstrap » 4.1.4

		implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.1.4'
		-> implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'


	http://localhost:5000/actuator/gateway/routes


>git init
>git remote add origin https://github.com/hjchoirr/BoardProject.git 
>git add .
>git commit -m "초기 업로드"
>git push origin master

member에 swagger 설정 후

http://localhost:5001/swagger-ui/index.html
http://localhost:5000/member-service/swagger-ui/index.html
http://13.124.204.160:3100/gateway-server/default
http://13.124.204.160:3100/gateway-server/default
http://13.124.204.160:3100/gateway-service/dev



로컬환경
테스트 서버 구축 - 로컬 개발PC에 연동되는지 테스트
AWS - 젠킨스연동



RestTemplate에서 PATCH, PUT 등 메서드 지원 하게 설정

의존성 추가
implementation 'org.apache.httpcomponents.core5:httpcore5:5.3'

globals/configs/BeanConfig.java

	@Lazy
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate(new HttpComponentsClientHttpRequestFactory());
    }



@WithMockUser
MockSecurityContextFactory

9/13 
  10:40 동영상 MockMember
  11:45 @PreAuthorize - controller 아니어도 .. 사용..부분


package org.choongang.global.tests;

import org.choongang.member.MemberInfo;
import org.choongang.member.entities.Authorities;
import org.choongang.member.entities.Member;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.test.context.support.WithSecurityContextFactory;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class MockSecurityContextFactory implements WithSecurityContextFactory<MockMember> {

    @Autowired
    private PasswordEncoder encoder;
    @Override
    public SecurityContext createSecurityContext(MockMember mockMember) {
        Member member = new Member();
        member.setSeq(1L);
        member.setEmail(mockMember.email());
        member.setPassword(encoder.encode(mockMember.password()));
        member.setUserName(mockMember.userName());
        member.setMobile(mockMember.mobile());
        member.setGid(mockMember.gid());

        Authorities authorities = new Authorities();
        authorities.setAuthority(mockMember.authority());

        List<Authorities> items = List.of(authorities);
        member.setAuthorities(items);

        List<SimpleGrantedAuthority> _authorities = List.of(new SimpleGrantedAuthority(mockMember.authority().name()));

        MemberInfo memberInfo = MemberInfo.builder()
                .email(member.getEmail())
                .password(member.getPassword())
                .authorities((_authorities))
                .member(member)
                .build();

        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(memberInfo, null, _authorities);

        SecurityContext context = SecurityContextHolder.createEmptyContext();
        context.setAuthentication(token);

        return context;
    }
}

---------------------------------------------------------------
package org.choongang.global.tests;

import org.choongang.member.constants.Authority;
import org.springframework.security.test.context.support.WithSecurityContext;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
@WithSecurityContext(factory = MockSecurityContextFactory.class)
public @interface MockMember {
    long seq() default 1L;
    String gid() default "testgid";
    String email() default "user01@test.com";
    String password() default "user01@test.comT";
    String userName() default "test사용자01";
    String mobile() default "0100001111";
    Authority authority() default Authority.USER;
}


package org.choongang.board;

import org.choongang.global.tests.MockMember;
import org.choongang.member.MemberUtil;
import org.choongang.member.constants.Authority;
import org.choongang.member.entities.Member;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;

@SpringBootTest
@AutoConfigureMockMvc
public class boardTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private MemberUtil memberUtil;

    @Test
    @MockMember
    void test1() {
        Member member = memberUtil.getMember();
        System.out.println("mock member :" + member);
    }

    @Test
    @MockMember(authority = Authority.ADMIN)
    void test2() throws Exception {
        mockMvc.perform(get("/admin/info/free")).andDo(print());
    }
}

@PreAuthorize("hasAnyAuthority('ADMIN')")
public 



nextjs
	- pages
	- SSR : Servier Side Rendering
		- export const getServerSideProps = async(ctx) => {
			return{
				props: {}
			}
		}
	- SSG : 정적인 페이지 Server Side Generate
	- ISR : 점진적인 SSG : revalidate : 초, 주기적으로 SSG를 갱신
		- export const getStaticProps = async(ctx) => {
			return{
				props: {}
			}
		}
	App Router
		app : 라우터 경로
	useRouter
	
	
useLayoutEffect : 컴포넌트 마운트되기 전에 실행됨 ( useEffect : 컴포넌트 랜더링시 호출 )


useRouter

 - 페이지 이동
 - 변경 replace("주소")  : history 없음
 - 새로고침 : reload()
	next/router -> SSR 모드에서
	next/navigation -> CSR 모드애서
	

d:\> yarn dev -p 7000   ( 7000 포트로 리액트 실행 )



https://www.npmjs.com/search?q=pm2

yarn add pm2


/* eslint-disable react-hooks/rules-of-hooks */
D:\P-5\frontend-admin>yarn server
D:\P-5\frontend-admin>npx pm2 list
D:\P-5\frontend-admin>npx pm2 reload all
D:\P-5\frontend-admin>npx pm2 stop all
D:\P-5\frontend-admin>npx pm2 delete all


yarn dev -p 7001


yarn add @ckeditor/ckeditor5-react



server world 사이트 *****


9/26 오전 9시 20분 aws에 yarn build , nginx 설치 , nginx reverse proxy 설치


http://thxforservice.xyz/
http://nonnull.life/

http://nonnull.life:6007/
http://sangdam.xyz/


